{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"CodingGuidelines/","text":"Coding Guidelines Features Branching Documentation Principles To ensure our software is maintainable and reusable, documentation of our code is a requirement. All non-emergency code merged into the main branch of our primary repo should have relevant in-line documentation. It is the developer who is submitting the code to repo's responsiblity to write the appropriate documentation. API Documentation Much of our chosen languages have documentation generating comment syntax. This should be used whenever available. Web Based Documentation Non-in-code documentation should be written on this documentation site.","title":"Coding Guidelines"},{"location":"CodingGuidelines/#coding-guidelines","text":"","title":"Coding Guidelines"},{"location":"CodingGuidelines/#features-branching","text":"","title":"Features Branching"},{"location":"CodingGuidelines/#documentation-principles","text":"To ensure our software is maintainable and reusable, documentation of our code is a requirement. All non-emergency code merged into the main branch of our primary repo should have relevant in-line documentation. It is the developer who is submitting the code to repo's responsiblity to write the appropriate documentation.","title":"Documentation Principles"},{"location":"CodingGuidelines/#api-documentation","text":"Much of our chosen languages have documentation generating comment syntax. This should be used whenever available.","title":"API Documentation"},{"location":"CodingGuidelines/#web-based-documentation","text":"Non-in-code documentation should be written on this documentation site.","title":"Web Based Documentation"},{"location":"ProjectBacklog/","text":"Project Backlog User Stories It is the job of the Product Owner and Scrum Master to manage the product backlog. Team members will be directly assigned to (usually) one story at a time, and will be responsible for completing it's tasks in a timely manner. Team members need to pay attention to their assigned user stories and be mindful of how they work with eachother. Some stories may be dependent on others, so team members should be aware of time constraints and strive to complete dependancy tasks as soon as possible. Tags Critical Security Story This story represents any security related story, bugfix, or feature that needs to be fixed ASAP. Our Cybersecurity Lead can create and schedule these as needed. Functional Functional user stories implement tangible features in the product. They are often immediately usable. Nonfunctional This user story does not provide any immediate features but instead provides other utilities. This can often simply be updating the documentation, configuring a tool, or performing research.","title":"Project Backlog"},{"location":"ProjectBacklog/#project-backlog","text":"","title":"Project Backlog"},{"location":"ProjectBacklog/#user-stories","text":"It is the job of the Product Owner and Scrum Master to manage the product backlog. Team members will be directly assigned to (usually) one story at a time, and will be responsible for completing it's tasks in a timely manner. Team members need to pay attention to their assigned user stories and be mindful of how they work with eachother. Some stories may be dependent on others, so team members should be aware of time constraints and strive to complete dependancy tasks as soon as possible.","title":"User Stories"},{"location":"ProjectBacklog/#tags","text":"","title":"Tags"},{"location":"ProjectBacklog/#critical-security-story","text":"This story represents any security related story, bugfix, or feature that needs to be fixed ASAP. Our Cybersecurity Lead can create and schedule these as needed.","title":"Critical Security Story"},{"location":"ProjectBacklog/#functional","text":"Functional user stories implement tangible features in the product. They are often immediately usable.","title":"Functional"},{"location":"ProjectBacklog/#nonfunctional","text":"This user story does not provide any immediate features but instead provides other utilities. This can often simply be updating the documentation, configuring a tool, or performing research.","title":"Nonfunctional"}]}